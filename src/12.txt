
lerInteiro: 
enter 0,0
push dword 1

mov eax, 3
mov ebx, 0
mov ecx, dword[ebp+8]
mov edx, 1
int 0x80

cmp byte[ecx], '-'
je LerNegativo  
push 0              
mov ebx, dword[ecx] 
sub ebx, 0x30       

LerPositivo:
call DigitoInteiro    
push eax     
mov ecx, 11     

lerintLoop1:
mov eax, 3
push ecx            
mov ecx, dword[ebp + 8] 
int 0x80
cmp byte[ecx], 0xA 
je fimLeitura       
mov eax, dword[ecx] 
sub eax, 0x30       
call DigitoInteiro        
mov dword[ecx], eax
mov eax, [esp + 4] 
sal eax, 3
add eax, [esp+4]
add eax, [esp+4]
add eax, [ecx]      
pop ecx         
mov [esp], eax   
inc dword[ebp-4]
loop lerintLoop1    

fimLeitura:
pop eax
pop eax
pop ecx
cmp ecx, 0
je semSinal
neg eax

semSinal:
mov ecx, [ebp + 8]
mov [ecx], eax
mov eax, [ebp -4]
leave
ret 4

LerNegativo:
push 1          
mov eax, 0
jmp LerPositivo

DigitoInteiro:
cmp eax, 9
jg fimLeitura 
cmp eax, 0
jl fimLeitura   
ret 0